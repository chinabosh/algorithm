package com.bosh.lib;

/**
 * @author lzq
 * @date 2021/9/3
 */
public class Solution13 {
    /**
     * 在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。
     * <p>
     * 车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。
     * <p>
     * 返回车能够在一次移动中捕获到的卒的数量。
     *  
     * <p>
     * 示例 1：
     * <p>
     * <p>
     * <p>
     * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
     * 输出：3
     * 解释：
     * 在本例中，车能够捕获所有的卒。
     * 示例 2：
     * <p>
     * <p>
     * <p>
     * 输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
     * 输出：0
     * 解释：
     * 象阻止了车捕获任何卒。
     * 示例 3：
     * <p>
     * <p>
     * <p>
     * 输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
     * 输出：3
     * 解释：
     * 车可以捕获位置 b5，d6 和 f5 的卒。
     *  
     * <p>
     * 提示：
     * <p>
     * board.length == board[i].length == 8
     * board[i][j] 可以是 'R'，'.'，'B' 或 'p'
     * 只有一个格子上存在 board[i][j] == 'R'
     * <p>
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/available-captures-for-rook
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     *
     * @param board
     * @return
     */
    public int numRookCaptures(char[][] board) {
        int count = 0;
        int i, j = 0, x, y;
        for (i = 0; i < board.length; i++) {
            boolean find = false;
            for (j = 0; j < board.length; j++) {
                if (board[i][j] == 'R') {
                    find = true;
                    break;
                }
            }
            if (find) {
                break;
            }
        }
        x = i;
        y = j;
        int dir = 0;
        for (int m = 1; ; m++) {
            if ((dir & 1) == 0) {
                if (y - m >= 0) {
                    if (board[x][y - m] == 'p') {
                        count++;
                        dir |= 1;
                    }
                    if (board[x][y - m] == 'B') {
                        dir |= 1;
                    }
                } else {
                    dir |= 1;
                }
            }
            if ((dir & 2) == 0) {
                if (y + m < board.length) {
                    if (board[x][y + m] == 'p') {
                        count++;
                        dir |= 2;
                    }
                    if (board[x][y + m] == 'B') {
                        dir |= 2;
                    }
                } else {
                    dir |= 2;
                }
            }
            if ((dir & 4) == 0) {
                if (x - m >= 0) {
                    if (board[x - m][y] == 'p') {
                        count++;
                        dir |= 4;
                    }
                    if (board[x - m][y] == 'B') {
                        dir |= 4;
                    }
                } else {
                    dir |= 4;
                }
            }
            if ((dir & 8) == 0) {
                if (x + m < board.length) {
                    if (board[x + m][y] == 'p') {
                        count++;
                        dir |= 8;
                    }
                    if (board[x + m][y] == 'B') {
                        dir |= 8;
                    }
                } else {
                    dir |= 8;
                }
            }
            if ((dir & 15) == 15) {
                break;
            }
        }
        return count;
    }
}
